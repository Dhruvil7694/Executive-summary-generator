import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Download } from 'lucide-react';

const VulnerabilityReport = ({ report }) => {
  // Define the display order
  const displayOrder = [
    { key: 'ExecutiveSummary', label: 'Executive Summary' },
    { key: 'Introduction', label: 'Introduction' },
    { key: 'Findings', label: 'Findings' },
    { key: 'Results', label: 'Detailed Results' },
    { key: 'Recommendations', label: 'Recommendations' },
    { key: 'Conclusion', label: 'Conclusion' },
    { key: 'Metadata', label: 'Metadata' }
  ];

  const formatValue = (key, value) => {
    if (key === 'Results') {
      return (
        <div className="space-y-4">
          {value.map((result, index) => (
            <div key={index} className="p-4 rounded-lg bg-gray-50 dark:bg-gray-800">
              <div className="flex items-center gap-2 mb-2">
                <span className={`px-2 py-1 text-sm rounded-full ${
                  result.severity === 'Critical' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' :
                  result.severity === 'High' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' :
                  'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                }`}>
                  {result.severity}
                </span>
                <span className="font-medium">{result.vulnerability}</span>
              </div>
              <p className="text-gray-600 dark:text-gray-300 text-sm">
                {result.description}
              </p>
            </div>
          ))}
        </div>
      );
    }
    
    if (key === 'Metadata') {
      return (
        <div className="space-y-2">
          <div className="text-sm">
            <span className="font-medium">Processing Completed:</span>{' '}
            {new Date(value.processing_completed).toLocaleString()}
          </div>
          <div className="text-sm">
            <span className="font-medium">Text Length:</span>{' '}
            {value.text_length}
          </div>
          <div className="text-sm">
            <span className="font-medium">Timestamp:</span>{' '}
            {new Date(value.timestamp).toLocaleString()}
          </div>
        </div>
      );
    }

    if (typeof value === 'string' && value.includes('\n')) {
      return value.split('\n').map((line, index) => (
        <p key={index} className="mb-2">
          {line}
        </p>
      ));
    }

    return value;
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Vulnerability Assessment Report</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="rounded-lg border border-gray-200 dark:border-gray-700 divide-y divide-gray-200 dark:divide-gray-700">
          {displayOrder.map(({ key, label }) => (
            <div key={key} className="p-4">
              <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                {label}
              </h3>
              <div className="text-gray-600 dark:text-gray-300">
                {formatValue(key, report[key])}
              </div>
            </div>
          ))}
        </div>
        
        <Button 
          className="mt-4"
          onClick={() => {
            const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'vulnerability-assessment-report.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          }}
        >
          <Download className="mr-2 h-4 w-4" />
          Download Report
        </Button>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityReport;